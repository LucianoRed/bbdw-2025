<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat com Streaming SSE</title>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        :root {
            --bg-primary: #f5f5f5;
            --bg-secondary: white;
            --bg-chat: #fafafa;
            --bg-user: #007bff;
            --bg-ai: #e9ecef;
            --text-primary: #333;
            --text-secondary: #666;
            --text-user: white;
            --border-color: #ddd;
            --shadow: rgba(0,0,0,0.1);
        }

        body.dark-mode {
            --bg-primary: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --bg-chat: #242424;
            --bg-user: #0056b3;
            --bg-ai: #3a3a3a;
            --text-primary: #e0e0e0;
            --text-secondary: #b0b0b0;
            --text-user: white;
            --border-color: #444;
            --shadow: rgba(0,0,0,0.3);
        }

        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            transition: background-color 0.3s, color 0.3s;
        }
        .chat-container {
            background: var(--bg-secondary);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px var(--shadow);
            transition: background-color 0.3s, box-shadow 0.3s;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        #darkModeToggle {
            padding: 8px 16px;
            background: var(--bg-ai);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        #darkModeToggle:hover {
            opacity: 0.8;
        }
        #chatMessages {
            height: 400px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            background: var(--bg-chat);
            transition: all 0.3s;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 5px;
            line-height: 1.6;
        }
        .user-message {
            background: var(--bg-user);
            color: var(--text-user);
            text-align: right;
        }
        .ai-message {
            background: var(--bg-ai);
            color: var(--text-primary);
        }
        .ai-message h1, .ai-message h2, .ai-message h3 {
            margin-top: 0.5em;
            margin-bottom: 0.5em;
        }
        .ai-message h1 { font-size: 1.5em; }
        .ai-message h2 { font-size: 1.3em; }
        .ai-message h3 { font-size: 1.1em; }
        .ai-message ul, .ai-message ol {
            margin: 0.5em 0;
            padding-left: 1.5em;
        }
        .ai-message li {
            margin: 0.3em 0;
        }
        .ai-message p {
            margin: 0.5em 0;
        }
        .ai-message code {
            background: var(--bg-chat);
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        .ai-message pre {
            background: var(--bg-chat);
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            margin: 0.5em 0;
        }
        .ai-message pre code {
            background: none;
            padding: 0;
        }
        .ai-message strong {
            font-weight: bold;
        }
        .ai-message em {
            font-style: italic;
        }
        .input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        #messageInput {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        #sendButton {
            padding: 10px 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        #sendButton:hover {
            background: #0056b3;
        }
        #sendButton:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        #clearButton {
            padding: 10px 20px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
        }
        #clearButton:hover {
            background: #c82333;
        }
        .streaming {
            border-left: 3px solid var(--bg-user);
            padding-left: 10px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="header">
            <h1>Chat com OpenShift Health Assistant</h1>
            <button id="darkModeToggle">üåô Dark Mode</button>
        </div>
        <div id="chatMessages"></div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Digite sua mensagem...">
            <button id="sendButton">Enviar</button>
        </div>
        <button id="clearButton">üóëÔ∏è Limpar Conversa</button>
    </div>

    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const clearButton = document.getElementById('clearButton');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const sessionId = 'user-' + Math.random().toString(36).substr(2, 9);

        // Configurar marked.js para renderiza√ß√£o de markdown
        marked.setOptions({
            breaks: true,
            gfm: true
        });

        // Verificar prefer√™ncia de dark mode salva
        const savedDarkMode = localStorage.getItem('darkMode') === 'true';
        if (savedDarkMode) {
            document.body.classList.add('dark-mode');
            darkModeToggle.textContent = '‚òÄÔ∏è Light Mode';
        }

        // Toggle dark mode
        darkModeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            darkModeToggle.textContent = isDark ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
            localStorage.setItem('darkMode', isDark);
        });

        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            
            if (isUser) {
                messageDiv.textContent = content;
            } else {
                // Renderizar markdown para mensagens da AI
                messageDiv.innerHTML = marked.parse(content);
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            return messageDiv;
        }

        async function clearConversation() {
            if (!confirm('Deseja realmente limpar toda a conversa?')) {
                return;
            }

            try {
                // Limpa a mem√≥ria no backend
                await fetch(`http://localhost:8080/chat/memory/${sessionId}`, {
                    method: 'DELETE'
                });

                // Limpa a interface
                chatMessages.innerHTML = '';
                
                // Adiciona mensagem de confirma√ß√£o
                const confirmDiv = document.createElement('div');
                confirmDiv.style.textAlign = 'center';
                confirmDiv.style.padding = '20px';
                confirmDiv.style.color = '#666';
                confirmDiv.textContent = '‚úì Conversa limpa com sucesso';
                chatMessages.appendChild(confirmDiv);

                setTimeout(() => {
                    confirmDiv.remove();
                }, 2000);

            } catch (error) {
                console.error('Erro ao limpar conversa:', error);
                alert('Erro ao limpar a conversa');
            }
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            // Adiciona mensagem do usu√°rio
            addMessage(message, true);
            messageInput.value = '';
            sendButton.disabled = true;

            // Cria div para a resposta com streaming
            const aiMessageDiv = document.createElement('div');
            aiMessageDiv.className = 'message ai-message streaming';
            chatMessages.appendChild(aiMessageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            try {
                // Envia requisi√ß√£o com SSE
                const response = await fetch('http://localhost:8080/chat/stream', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        sessionId: sessionId
                    })
                });

                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let accumulatedText = '';
                let buffer = '';

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    buffer += decoder.decode(value, { stream: true });
                    
                    // Processa eventos SSE do buffer
                    const lines = buffer.split('\n');
                    buffer = lines.pop() || ''; // Mant√©m a √∫ltima linha incompleta no buffer
                    
                    for (const line of lines) {
                        if (line.startsWith('data:')) {
                            const data = line.substring(5); // Remove 'data:' mas mant√©m espa√ßos
                            if (data) {
                                accumulatedText += data;
                                // Renderizar markdown em tempo real durante o streaming
                                aiMessageDiv.innerHTML = marked.parse(accumulatedText);
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }
                        }
                    }
                }

                aiMessageDiv.classList.remove('streaming');
            } catch (error) {
                console.error('Erro ao enviar mensagem:', error);
                aiMessageDiv.textContent = 'Erro ao comunicar com o servidor';
                aiMessageDiv.classList.remove('streaming');
            } finally {
                sendButton.disabled = false;
                messageInput.focus();
            }
        }

        sendButton.addEventListener('click', sendMessage);
        clearButton.addEventListener('click', clearConversation);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Foca no input ao carregar
        messageInput.focus();
    </script>
</body>
</html>
