quarkus.langchain4j.chat-memory.memory-window.max-messages=30

# ============================================================================
# Redis Configuration - Dev Services habilitado automaticamente em modo dev
# ============================================================================
# Dev Services: O Quarkus irá subir automaticamente um container Redis em modo dev
# Não é necessário configurar quarkus.redis.hosts em modo dev
quarkus.redis.devservices.enabled=true
quarkus.redis.devservices.image-name=redis/redis-stack-server:7.2.0-v19
quarkus.redis.devservices.port=6379

# Configuração para produção (apenas quando não estiver em modo dev)
%prod.quarkus.redis.hosts=${REDIS_URL:redis://localhost:6379}
quarkus.redis.timeout=10s

# Configuração do ChatMemoryStore com Redis
quarkus.langchain4j.redis.dimension=1536

# ============================================================================
# RAG Configuration - OpenShift Documentation
# ============================================================================
# Embedding model para vetorização de documentos
quarkus.langchain4j.openai.embedding-model.model-name=text-embedding-3-small
quarkus.langchain4j.openai.embedding-model.timeout=30s

# Redis como Vector Store
quarkus.langchain4j.redis.index-name=openshift-docs
quarkus.langchain4j.redis.prefix=doc:

# Easy RAG - Configuração automática de ingestion e retrieval
quarkus.langchain4j.easy-rag.path=src/main/resources/rag-documents
quarkus.langchain4j.easy-rag.path-type=filesystem
quarkus.langchain4j.easy-rag.recursive=true
quarkus.langchain4j.easy-rag.path-matcher=glob:**.{md,txt,pdf,html}
quarkus.langchain4j.easy-rag.max-segment-size=500
quarkus.langchain4j.easy-rag.max-overlap-size=50
quarkus.langchain4j.easy-rag.max-results=5
quarkus.langchain4j.easy-rag.min-score=0.7
quarkus.langchain4j.easy-rag.ingestion-strategy=manual
quarkus.langchain4j.embedding-model.provider=openai


quarkus.langchain4j.my-model.chat-model.provider=openai
quarkus.langchain4j.openai.my-model.chat-model.model-name=gpt-4o-mini
quarkus.langchain4j.openai.my-model.log-requests=false
quarkus.langchain4j.openai.my-model.log-responses=false
quarkus.langchain4j.openai.my-model.chat-model.temperature=1.0
quarkus.langchain4j.openai.my-model.chat-model.max-completion-tokens=2048
quarkus.langchain4j.openai.my-model.timeout=40s

# Configuração do servidor MCP 
quarkus.langchain4j.mcp.k8s-server.transport-type=streamable-http
quarkus.langchain4j.mcp.k8s-server.log-requests=true
quarkus.langchain4j.mcp.k8s-server.log-responses=true
quarkus.langchain4j.mcp.k8s-server.tool-execution-timeout=60s
quarkus.langchain4j.mcp.k8s-server.initialization-timeout=60s
quarkus.langchain4j.mcp.k8s-server.microprofile-health-check=true

# SSL Configuration - Aceitar certificados auto-assinados (apenas para desenvolvimento)
quarkus.tls.trust-all=true

# Reduzir timeouts do Vert.x já que usamos @RunOnVirtualThread para operações bloqueantes
quarkus.vertx.max-event-loop-execute-time=10s
quarkus.vertx.max-worker-execute-time=30s

# ============================================================================
# Chat Memory Compaction - Job agendado para economizar tokens e espaço no Redis
# ============================================================================
# O job roda a cada 5 minutos e resume mensagens antigas, mantendo as mais recentes
# Configurações podem ser ajustadas conforme necessário
quarkus.scheduler.enabled=true

